load("@wfa_common_jvm//build/openssl:defs.bzl", "generate_root_certificate", "generate_user_certificate")
load("@io_bazel_rules_kotlin//kotlin:kotlin.bzl", "kt_jvm_library")

package(
    default_testonly = True,
    default_visibility = [
        "//src/main/kotlin/org/wfanet/measurement/consent:__subpackages__",
        "//src/test/kotlin/org/wfanet/measurement/consent:__subpackages__",
    ],
)

generate_root_certificate(
    name = "mc_1_root",
    common_name = " Some MC",
    hostname = "ca.mc.example.com",
    org = "Some MC Organization"
)

generate_user_certificate(
    name = "mc_1",
    common_name = "Some MC",
    hostname = "server.mc.example.com",
    org = "Some MC 1",
    root_certificate = ":mc_1_root.pem",
    root_key = ":mc_1_root.key",
)

generate_root_certificate(
    name = "edp_1_root",
    common_name = "Some EDP",
    hostname = "ca.edp.example.com",
    org = "Some EDP Organization"
)

generate_user_certificate(
    name = "edp_1",
    common_name = "Some EDP",
    hostname = "server.edp.example.com",
    org = "Some EDP 1",
    root_certificate = ":edp_1_root.pem",
    root_key = ":edp_1_root.key",
)

generate_root_certificate(
    name = "aggregator_root",
    common_name = "Some Aggregator",
    hostname = "ca.aggregator.example.com",
    org = "Some Aggregator Organization"
)

generate_user_certificate(
    name = "aggregator",
    common_name = "Duchy Aggregator",
    hostname = "duchy-aggregator.example.com",
    org = "The Aggregator",
    root_certificate = ":aggregator_root.pem",
    root_key = ":aggregator_root.key",
)

generate_root_certificate(
    name = "non_aggregator_1_root",
    common_name = "A Duchy 1",
    hostname = "ca.nonaggregator1.example.com",
    org = "A Duchy 1"
)

generate_user_certificate(
    name = "non_aggregator_1",
    common_name = "Some Non Aggregator 1",
    hostname = "server.nonaggregator1.example.com",
    org = "A Duchy 1",
    root_certificate = ":non_aggregator_1_root.pem",
    root_key = ":non_aggregator_1_root.key",
)

generate_root_certificate(
    name = "non_aggregator_2_root",
    common_name = "A Duchy 2",
    hostname = "ca.nonaggregator2.example.com",
    org = "A Duchy 2"
)

generate_user_certificate(
    name = "non_aggregator_2",
    common_name = "A Duchy 2",
    hostname = "some-duchy-2.example.com",
    org = "A Duchy 2",
    root_certificate = ":non_aggregator_2_root.pem",
    root_key = ":non_aggregator_2_root.key",
)

filegroup(
    name = "mc_certs",
    srcs = [
        "mc_1.key",
        "mc_1.pem",
    ],
)

filegroup(
    name = "edp_certs",
    srcs = [
        "edp_1.key",
        "edp_1.pem",
    ],
)

filegroup(
    name = "duchy_certs",
    srcs = [
        ":aggregator.key",
        ":aggregator.pem",
        ":non_aggregator_1.key",
        ":non_aggregator_1.pem",
    ],
)

kt_jvm_library(
    name = "testing",
    srcs = glob(["*.kt"]),
    data = [
        ":duchy_certs",
        ":edp_certs",
        ":mc_certs",
        "@wfa_common_jvm//src/main/kotlin/org/wfanet/measurement/common/crypto/testing/testdata:static_certs",
    ],
    deps = [
        "@wfa_common_jvm//src/main/kotlin/org/wfanet/measurement/common",

    ],
)
